package com.ReubensGames.Charge.glAbstraction;import android.opengl.GLES20;import android.util.Log;public class ShaderProgram{	private static final String TAG = "SHADER_PROGRAM";	private int programObject; 	private int vertexShaderObject;	private int fragmentShaderObject;	private int[] uniformLocation;	private int[] samplerLocation;	private int[] attributeLocation;		public ShaderProgram()	{		programObject = 0;	}		public void Compile(String fVertexSrc, String fFragmentSrc)	{		vertexShaderObject = GLES20.glCreateShader(GLES20.GL_VERTEX_SHADER);		GLES20.glShaderSource(vertexShaderObject, fVertexSrc);		GLES20.glCompileShader(vertexShaderObject);		fragmentShaderObject = GLES20.glCreateShader(GLES20.GL_FRAGMENT_SHADER);		GLES20.glShaderSource(fragmentShaderObject, fFragmentSrc);		GLES20.glCompileShader(fragmentShaderObject);		programObject = GLES20.glCreateProgram();		GLES20.glAttachShader(programObject, vertexShaderObject);		GLES20.glAttachShader(programObject, fragmentShaderObject);		GLES20.glLinkProgram(programObject);        int[] linkStatus = new int[1];        GLES20.glGetProgramiv(programObject, GLES20.GL_LINK_STATUS, linkStatus, 0);        if (linkStatus[0] != GLES20.GL_TRUE) {            Log.e(TAG, "Could not link program: ");            Log.e(TAG, GLES20.glGetProgramInfoLog(programObject));            GLES20.glDeleteProgram(programObject);            programObject = 0;        }	}		public void SetUniformNumber(int fNumber)	{		uniformLocation = new int[fNumber];	}		public void SetSamplerNumber(int fNumber)	{		samplerLocation = new int[fNumber];	}		public void SetAttributeNumber(int fNumber)	{		attributeLocation = new int[fNumber];	}		public void SetUniformLocation(int fIndex, String fName)	{		uniformLocation[fIndex] = GLES20.glGetUniformLocation(programObject, fName);	}		public void SetSamplerLocation(int fIndex, String fName)	{		samplerLocation[fIndex] = GLES20.glGetUniformLocation(programObject, fName); 		GLES20.glUniform1i(samplerLocation[fIndex], fIndex);	}		public void SetAttributeLocation(int fIndex, String fName)	{		attributeLocation[fIndex] = GLES20.glGetAttribLocation(programObject, fName);	}		public int GetAttributeLocation(int fIndex)	{		return attributeLocation[fIndex];	}		public void SetUniformValue(int fIndex, int fValue)	{		GLES20.glUniform1i(uniformLocation[fIndex], fValue);	}	public void SetUniformValue(int fIndex, int fValue0, int fValue1)	{		GLES20.glUniform2i(uniformLocation[fIndex], fValue0, fValue1);	}	public void SetUniformValue(int fIndex, int fValue0, int fValue1, int fValue2)	{		GLES20.glUniform3i(uniformLocation[fIndex], fValue0, fValue1, fValue2);	}	public void SetUniformValue(int fIndex, int fValue0, int fValue1, int fValue2, int fValue3)	{		GLES20.glUniform4i(uniformLocation[fIndex], fValue0, fValue1, fValue2, fValue3);	}	public void SetUniformValue(int fIndex, float fValue)	{		GLES20.glUniform1f(uniformLocation[fIndex], fValue);	}	public void SetUniformValue(int fIndex, float fValue0, float fValue1)	{		GLES20.glUniform2f(uniformLocation[fIndex], fValue0, fValue1);	}	public void SetUniformValue(int fIndex, float fValue0, float fValue1, float fValue2)	{		GLES20.glUniform3f(uniformLocation[fIndex], fValue0, fValue1, fValue2);	}	public void SetUniformValue(int fIndex, float fValue0, float fValue1, float fValue2, float fValue3)	{		GLES20.glUniform4f(uniformLocation[fIndex], fValue0, fValue1, fValue2, fValue3);	}		public static void Use(ShaderProgram fProgram)	{		GLES20.glUseProgram(fProgram.programObject);	}		public static void Use(int fUnused)	{		GLES20.glUseProgram(0);	}}